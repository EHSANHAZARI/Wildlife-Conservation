Wildlife Image Classification Project â€“ Notes
Goal

Build a neural network that classifies wildlife species based on pictures taken in a preserve.

Input: Animal images.

Output: Probabilities across multiple categories (which animal type is in the image).

Dataset

Train dataset: Contains both images and labels (ground truth).

Test dataset: Contains only images (no labels). Your task is to predict labels for these.

CSV file information:

id: Unique identifier for each image.

filepath: Location of the stored image.

site: The location where the image was taken.

Some images may be blank (no animal).

Submission file: Must have 9 columns â†’ id plus predicted probabilities for each animal category.

Performance Metric

Error metric (lower is better, opposite of accuracy).

Log Loss formula:

N: Number of observations.

M: Number of classes.

y(i,j): True label for observation i (1 if true, 0 otherwise).

p(i,j): Predicted probability that observation i belongs to class j.

Goal: Achieve a low log loss, meaning the predicted probabilities are close to the correct categories.

PyTorch and Tensors

Definition: A tensor is a mathematical object (an array of values) organized into one or more dimensions.

Library: PyTorch provides tools to create and manipulate tensors, optimized for deep learning.

Creating a Tensor
import torch

my_values = [[1, 2, 3], [3, 4, 5], [6, 7, 8]]
my_tensor = torch.Tensor(my_values)
print(my_tensor)


Output:

tensor([[1., 2., 3.],
        [3., 4., 5.],
        [6., 7., 8.]])

Tensor Attributes
print(my_tensor.dtype)   # Data type of values
print(my_tensor.shape)   # Dimensions (rows Ã— columns)
print(my_tensor.device)  # Hardware (CPU or GPU)


Key Attributes:

.dtype â†’ data type of stored values (e.g., float32).

.shape â†’ size/dimensions of the tensor.

.device â†’ hardware (CPU/GPU) where the tensor is stored.

Key Concepts

Attribute: A property of a class (e.g., .shape of a tensor).

Class: A blueprint for objects; tensors are instances of the Tensor class.

Color channel: Image data split into Red, Green, Blue (RGB).

Method: A function defined inside a class (e.g., .to() to move a tensor to GPU).

Tensor: Multidimensional array used in deep learning.

Tensor Manipulation and Image Processing with PyTorch
1. Tensor Manipulation
Slicing

We use square brackets with indices to select subsets of values in a tensor:

# Select the first two rows
left_tensor = my_tensor[:2, :]  

# Select the last two rows
right_tensor = my_tensor[2:, :]  


The first index represents rows.

The second index represents columns.

Mathematical Operations

Addition:

summed_operator = left_tensor + right_tensor
summed_method = left_tensor.add(right_tensor)


Elementwise Multiplication:

ew_operator = left_tensor * right_tensor
ew_method = left_tensor.mul(right_tensor)


ðŸ‘‰ Elementwise multiplication is commutative (i.e., A * B = B * A).

Matrix Multiplication:

result = A @ B
result = A.matmul(B)


Multiplication is possible only if the number of columns in the first matrix equals the number of rows in the second matrix.

Matrix multiplication is not commutative.

Example:

[
2
	
5


7
	
3
]
Ã—
[
8


9
]
=
[
2
âˆ—
8
+
5
âˆ—
9


7
âˆ—
8
+
3
âˆ—
9
]
=
[
61


83
]
[
2
7
	â€‹

5
3
	â€‹

]Ã—[
8
9
	â€‹

]=[
2âˆ—8+5âˆ—9
7âˆ—8+3âˆ—9
	â€‹

]=[
61
83
	â€‹

]
Aggregation Calculations

Mean of all elements:

my_tensor.mean()


Mean across rows or columns:

my_tensor.mean(dim=0)   # Column-wise
my_tensor.mean(dim=1)   # Row-wise

2. CLI Commands for Google Cloud Platform

List storage:

gcloud storage ls


Download files:

gcloud storage cp "address" . --no-clobber


(--no-clobber prevents re-downloading files.)

Decompress files:

tar --skip-old-files -xzf project1.tar.gz


(Use tar --help for more options.)

3. Dataset Preparation
import os

data_dir = os.path.join("data_p1", "data_multiclass")
train_dir = os.path.join(data_dir, "train")

# Get class directories
class_directories = os.listdir(train_dir)
print(class_directories)

# Create class distribution mapping
class_distribution_dict = {}
for subdirectory in class_directories:
    path = os.path.join(train_dir, subdirectory)
    files = os.listdir(path)
    class_distribution_dict[subdirectory] = len(files)

4. Data Visualization with Matplotlib
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(10, 5))
ax.bar(class_distribution_dict.keys(), class_distribution_dict.values())
ax.set_xlabel("Class Label")
ax.set_ylabel("Frequency [count]")
ax.set_title("Class Distribution, Multiclass Training Set")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

5. Working with Images
Using Pillow
from PIL import Image
hot_image_pil = Image.open(hot_image_path)
print(type(hot_image_pil))  # Displays <class 'PIL.JpegImagePlugin.JpegImageFile'>
hot_image_pil


.size â†’ Returns width and height.

.mode â†’ Returns color mode (e.g., RGB or L).

Convert Image to Tensor with TorchVision
from torchvision import transforms
tensor_image = transforms.ToTensor()(image)


Tensor format: [C, H, W]

C = Channels (1 = grayscale, 3 = RGB)

H = Height

W = Width

Channel Separation Example
red_channel = antelope_tensor[0, :, :]
green_channel = antelope_tensor[1, :, :]
blue_channel = antelope_tensor[2, :, :]

ax0.imshow(red_channel, cmap="Reds")
ax1.imshow(green_channel, cmap="Greens")
ax2.imshow(blue_channel, cmap="Blues")

Find Min/Max Values in Tensor
import torch
max_val = torch.amax(antelope_tensor)
min_val = torch.amin(antelope_tensor)